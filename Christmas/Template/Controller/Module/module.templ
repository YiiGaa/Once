######MODULE-SERVICEIMPORT######
    @Resource(name = "@@serviceName@@")
    private @@serviceName@@ _@@serviceName@@;
######MODULE-SERVICEIMPORT######

######MODULE-CallService######
            //STEP call Service
            moduleMap = _@@serviceName@@.@@functionName@@(moduleMap);
            if(ErrorCodes.isErrorHappens(moduleMap)){
                returnJson = (JSONObject) moduleMap.get("returnParam");
                return returnJson;
            }

######MODULE-CallService######

######MODULE-CheckNecessaryParam######
            //STEP: check Neccessary parameters
            moduleMap.put("moduleParam", new HashMap<String, String>(){{
@@param@@
            }});
            moduleMap = ControllerModule.invokeMethod("CheckNecessaryParam", moduleMap);
            if(ErrorCodes.isErrorHappens(moduleMap)){
                returnJson = (JSONObject) moduleMap.get("returnParam");
                return returnJson;
            }

######MODULE-CheckNecessaryParam######

######MODULE-FillingParam######
			//STEP: filling param
            moduleMap.put("moduleParam", new HashMap<String, String>(){{
@@param@@
            }});
            moduleMap = ControllerModule.invokeMethod("FillingParam", moduleMap);
            if(ErrorCodes.isErrorHappens(moduleMap)){
                returnJson = (JSONObject) moduleMap.get("returnParam");
                return returnJson;
            }

######MODULE-FillingParam######

######MODULE-FileUpload######
			//STEP: Fileupload param
            moduleMap.put("moduleParam", new HashMap<String, String>(){{
@@param@@
            }});
            moduleMap = ControllerModule.invokeMethod("FileUpload", moduleMap);
            if(ErrorCodes.isErrorHappens(moduleMap)){
                returnJson = (JSONObject) moduleMap.get("returnParam");
                return returnJson;
            }

######MODULE-FileUpload######

######MODULE-SessionCancel######
            //STEP: clean session
            moduleMap.put("moduleParam", new String[] {
@@param@@
            });
            moduleMap = ControllerModule.invokeMethod("SessionCancel", moduleMap);
            if(ErrorCodes.isErrorHappens(moduleMap)){
                returnJson = (JSONObject) moduleMap.get("returnParam");
                return returnJson;
            }

######MODULE-SessionCancel######

######MODULE-CacheOperation######
			//STEP: CacheOperation param
            moduleMap.put("moduleParam", new HashMap<String, String>(){{
@@param@@
            }});
            moduleMap = ControllerModule.invokeMethod("CacheOperation", moduleMap);
            if(ErrorCodes.isErrorHappens(moduleMap)){
                returnJson = (JSONObject) moduleMap.get("returnParam");
                return returnJson;
            }

######MODULE-CacheOperation######

######MODULE-CheckIdentity######
			//STEP: CheckIdentity param
            moduleMap.put("moduleParam", new HashMap<String, String>(){{
@@param@@
            }});
            moduleMap = ControllerModule.invokeMethod("CheckIdentity", moduleMap);
            if(ErrorCodes.isErrorHappens(moduleMap)){
                returnJson = (JSONObject) moduleMap.get("returnParam");
                return returnJson;
            }

######MODULE-CheckIdentity######

######MODULE-SessionSave######
			//STEP save session
            ControllerModule.invokeMethod("SessionSave", moduleMap);

######MODULE-SessionSave######

######MODULE-SessionCancel######
            //STEP clean session
            moduleMap.put("moduleParam", new String[] {
@@param@@
            });
            ControllerModule.invokeMethod("SessionCancel", moduleMap);

######MODULE-SessionCancel######

######PARAM-Hash######
					put("@@key@@","@@value@@");
######PARAM-Hash######

######PARAM-Array######
					"@@value@@",
######PARAM-Array######