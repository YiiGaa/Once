{
 "President": "Alan Isaac",
 "CEO": "David Richardson",
 
 "India": [
  "Sachin Tendulkar",
  " UT",
  "Gautam Gambhir"
 ],
 
 "Srilanka": [
  "Lasith Malinga",
  "Angelo Mathews",
  "Kumar Sangakkara"
 ],
 
 "England": [
  "Alastair Cook",
  "Jonathan Trott",
  "Kevin Pietersen"
 ]
}
######controller######
	@GET
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/authentication")
	public JSONObject getAuthentication(@Context UriInfo requestParam){
		User currUser = UniEAPContextHolder.getContext().getCurrentUser();
		System.out.println("################");
		System.out.println(currUser.getAccount());
		JSONObject returnJson = new JSONObject();
		JSONObject tmpJson = new JSONObject();
		HashMap<String, Object> moduleParam = new HashMap<String, Object>();
		JSONObject tempJson = new JSONObject();
		
		try{
			moduleParam = new HashMap<String, Object>(){{
				put("checkParam_UriInfo", requestParam);
			}};
			moduleParam = ControllerModule.invokeMethod("ErgodicGetParam", moduleParam);
			if(ErrorCodes.isErrorHappens(moduleParam)){
				returnJson.put("errorCode", moduleParam.get("errorCode"));
				return returnJson;
			}
			
			//Step1 filter:check Neccessary parameters
//			tempJson = (JSONObject) moduleParam.get("passParam_JSONObject");
//			moduleParam = new HashMap<String, Object>(){{
//				put("checkParam_StringArr", new String[] {});
//			}};
//			moduleParam.put("composeParam_JSONObject", tempJson);
//			moduleParam = ControllerModule.invokeMethod("checkNecessaryParam", moduleParam);
//			if(ErrorCodes.isErrorHappens(moduleParam)){
//				returnJson.put("errorCode", moduleParam.get("errorCode"));
//				return returnJson;
//			}
			
			//Step2 preprocessing parameters
			tempJson = (JSONObject) moduleParam.get("passParam_JSONObject");
			moduleParam = new HashMap<String, Object>(){{
				put("fillingParam_StringString",  
					new HashMap<String, String>(){{
													put("page","1");
													put("per_page","1");
													put("sortby","");
													put("order","");
												}});
			}};
			moduleParam.put("fillingInParam_JSONObject", tempJson);
			moduleParam = ControllerModule.invokeMethod("FillingParam", moduleParam);
			if(ErrorCodes.isErrorHappens(moduleParam)){
				returnJson.put("errorCode", moduleParam.get("errorCode"));
				return returnJson;
			}
			
			try {
				tempJson = (JSONObject) moduleParam.get("passParam_JSONObject");
				if(null!=tempJson.get("user_name") && 0 == tempJson.get("user_name").toString().compareTo("auto")){
					tempJson.put("user_name",currUser.getAccount());
				}
				returnJson = userInfoManagerBLO.getAuthentication(tempJson);
				return returnJson; 
			} catch (Exception e){
				returnJson.put("errorCode", "BLOBlock");
				return returnJson;
			}
		} finally {
			returnJson = ErrorCodes.getErrorMessage(returnJson);
		}
	}
######controller######