######FUNCTION-NORMAL######
    public HashMap<String, Object> @@functionName@@(HashMap<String, Object> moduleMap) {
        COMMON_LOGGER.DEBUG(moduleMap, "Service start");

        try {
@@module@@
           
        } catch(Exception e){
            COMMON_LOGGER.ERROR(moduleMap, ErrorCodes.getErrorInfoFromException(e));
            ((JSONObject)moduleMap.get("returnParam")).put("errorCode", "Serivce_Inner_block");

        }  finally {
            //STEP get errorMessage
            moduleMap = ErrorCodes.getErrorMessage(moduleMap);
        }

        COMMON_LOGGER.DEBUG(moduleMap, "Service end");
        return moduleMap;
    }

######FUNCTION-NORMAL######

######FUNCTION-TRANSACTIONAL######
    @Transactional(rollbackFor = Exception.class)
    public HashMap<String, Object> @@functionName@@(HashMap<String, Object> moduleMap) {
        COMMON_LOGGER.DEBUG(moduleMap, "Service start");

        try {
@@module@@

        } catch(Exception e){
            COMMON_LOGGER.ERROR(moduleMap, ErrorCodes.getErrorInfoFromException(e));
            ((JSONObject)moduleMap.get("returnParam")).put("errorCode", "Serivce_Inner_block");

        }  finally {
            //STEP get errorMessage
            moduleMap = ErrorCodes.getErrorMessage(moduleMap);
             if(ErrorCodes.isErrorHappens(moduleMap)){
                 TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
             }
        }

        COMMON_LOGGER.DEBUG(moduleMap, "Service end");
        return moduleMap;
    }

######FUNCTION-TRANSACTIONAL######
