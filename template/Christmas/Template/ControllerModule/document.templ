######MODULE######
package com.@@group@@.@@projectname@@.controllermodule.@@module@@;

import com.alibaba.fastjson.JSONObject;
import com.@@group@@.@@projectname@@.controllercommon.COMMON_LOGGER;
import com.@@group@@.@@projectname@@.controllermodule.@@module@@.@@module@@Config;
import com.@@group@@.@@projectname@@.controllermodule.ErrorCodes;
import com.@@group@@.@@projectname@@.controllermodule.Link;
import javax.servlet.http.HttpServletRequest;

import java.util.HashMap;

/*
**version: v1.0
**Please do not modify the following
**If you modify the following contents, please re LinkModule: ruby Christmas.rb ./Menu/MakeEngineeringNormal/AutoLinkModule

######LinkpackageImport start######
import com.yiigaa.once.controllermodule.@@module@@.@@module@@;
######LinkpackageImport end######

######LinkObjectImport start######
        put("@@module@@", new @@module@@());
######LinkObjectImport end######

######GradleImport start######
//@@module@@
######GradleImport end######

######ErrorCodes start######
        //@@module@@
        put("MODULE_@@module@@_exception", new String[]{"E-CM01(@@module@@)", "@@module@@ 崩溃"});
######ErrorCodes end######
*/


public class @@module@@ extends Link {
    private HashMap<String, Object> doStart(HashMap<String, Object> param){
        HashMap<String, Object> returnMap = param;
        JSONObject passParam = (JSONObject) param.get("passParam");
        HashMap<String, String> moduleParam = (HashMap<String, String>) param.get("moduleParam");
        JSONObject returnParam = (JSONObject) param.get("returnParam");
        HttpServletRequest request = (HttpServletRequest)param.get("httpRequest");

        try {

            //add your own code

            return returnMap;
        } catch(Exception e){
            COMMON_LOGGER.ERROR(returnMap, ErrorCodes.getErrorInfoFromException(e));

            returnParam.put("errorCode", "MODULE_@@module@@_exception");
            returnMap.put("returnParam", returnParam);
        } finally {
            returnMap.put("passParam", passParam);
            returnMap.put("returnParam", returnParam);
            returnMap.put("httpRequest", request);
        }

        return returnMap;
    }

    public HashMap<String, Object> start(HashMap<String, Object> param){
        COMMON_LOGGER.DEBUG(param, "ControllerModule-@@module@@ start");
        HashMap<String, Object> returnParam = doStart(param);
        COMMON_LOGGER.DEBUG(returnParam, "ControllerModule-@@module@@ end");
        return returnParam;
    }
}


######MODULE######

######CONFIG######
package com.@@group@@.@@projectname@@.controllermodule.@@module@@;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component
public class @@module@@Config {
    //@Value("${controller.setting}")
    //public void setSetting(String setting) {
    //    @@module@@Config.setting = setting;
    //}

    //public static String setting;
}
######CONFIG######

######README######
# @@position@@ 模块：@@module@@

## 模块功能简述

@@module@@模块的主要功能包括：

> 对passParam数据池中的数据进行操作。

- xxx；
- xxx；
- xxx；

| 模块名              | 最新版本 | 模块位置   | 依赖服务 |
| ------------------- | -------- | ---------- | -------- |
| @@module@@ | v1.0     | Controller | 无       |

## Christmas 使用例子

使用此模块，在/Christmas/Input/MakeCodeNormal/Controller@xxx/target.json中使用。

- 普通例子

```
                        {
                            "templ":"MODULE-@@module@@",
                            "param_templ":"PARAM-Hash",
                            "param":[{
                                "":""
                            }]
                        }
```

## 配置文件设置

| 参数 | 必要 | 缺省值 | 说明 |
| ---- | ---- | ------ | ---- |
|      |      |        |      |

配置文件配置项在@@module@@/Templates.tmpl中，修改配置后，需要重新[连接模块](https://stoprefactoring.com/#content@content#framework/once/module-link)才能让配置生效。

- 生产环境的配置在propertiesTemplate中，连接模块后，会自动生成到/config/application.properties文件中；
- 开发环境的配置在propertiesTemplate local中，连接模块后，会自动生成到/config/application-local.properties文件中；

## moduleParam参数说明

### 通用参数

| 参数                | 必要 | 类型   | 缺省值 | 取值范围                    | 说明                                                         |
| ------------------- | ---- | ------ | ------ | --------------------------- | ------------------------------------------------------------ |
|       |    |    |   |                             |  |

#### 模块参数参数类型说明：

- String：普通的字符串
- StringX：超级字符串，可以添加多个@xx@在里面，模块会自动把passParam中xx字段的值替换到这个字符串中。如，moduleParam中有{"abc":"@userid@"}，模块会自动把passParam中userid字段的值替换进去，如果passParam中不存在userid则保留原状。
- Bool：Bool型，true/false
- Int：Int型，数字类型

>注意：moduleParam的参数类型是指参数的真实类型，比如isNotNullError的类型为bool（true/false），但是在填入Christmas时，依然以字符串形式（如：{"isNotNullError":"true"}）写入，另外，int类型也需要写成字符串的形式如（如：{"maxFileSize":"20000"}）。

#### Once架构数据池说明：

- passParam：中间参数，所有模块共享的数据池，API请求时传过来的参数在会自动放在里面；

- moduleParam：模块独有参数，模块调用时传入，Christmas使用例子中的param实际上就是模块参数；

- returnParam：接口返回的数据池，所有模块共享的数据池，存进去后，最后会自动返回给请求端；

- httpRequest：HttpServletRequest，接口访问时的原始数据对象；

> passParam，sessionSave，returnParam的数据类型为JsonObject，moduleParam的数据类型为HashMap<String, String> 即字符串的键值对。

## 报错说明

报错说明详细见@@module@@.java中的ErrorCodes。

## SpringBoot(Gradle)依赖

依赖包详细见@@module@@.java中的GradleImport。

## 其他说明
######README######

######TARGETTEMPLATE######
**Please do not modify the following
**If you modify the following contents, please re LinkModule: ruby Christmas.rb ./Menu/MakeEngineeringNormal/AutoLinkModule

====== codeTemplate start ======
######MODULE-@@module@@######
			//STEP: @@module@@
            moduleMap.put("moduleParam", new HashMap<String, String>(){{
@@param@@
            }});
            moduleMap = ControllerModule.invokeMethod("@@module@@", moduleMap);
            if(ErrorCodes.isErrorHappens(moduleMap)){
                returnJson = (JSONObject) moduleMap.get("returnParam");
                return returnJson;
            }

######MODULE-@@module@@######
====== codeTemplate end ======

====== propertiesTemplate start ======
##ControllerModuel: @@module@@
====== propertiesTemplate end ======

====== propertiesTemplate local start ======
##ControllerModuel: @@module@@
====== propertiesTemplate local end ======

######TARGETTEMPLATE######